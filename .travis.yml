# TODO improve artifacts sharng between the jobs, keep track of the following issues:
# - https://github.com/travis-ci/travis-ci/issues/7590
# - https://travis-ci.community/t/using-unified-cache-control-cache-identity/1531
branches:
  only:
    - tutanota-mail
language: node_js
node_js: 12
cache:
  yarn: false
  npm: false
  directories:
    - output/git
env:
  global:
    - MOZ_HEADLESS=1 # needed for karma tests running in headless mode
jobs:
  include:
    - stage: 'Build app'
      os: osx
      osx_image: xcode9.4
      addons:
        firefox: latest
      script: ./scripts/ci/travis/build-osx.sh
    - stage: 'Build app'
      os: linux
      dist: bionic
      sudo: required
      services:
        - docker
        # needed for: running e2e tests
        - xvfb
      env:
        # needed for: native modules compiling
        - CC=gcc-7 CXX=g++-7
      addons:
        apt:
          packages:
            # needed for: native modules compiling
            - g++-7
            # needed for: compiling "desktop-idle" native module
            - libxss-dev
            # needed for: keychain initialization and compiling "node-keytar" native module
            - gnome-keyring
            - libgnome-keyring-dev
            - libsecret-1-dev
            # needed for: keychain access testing before running e2e tests (see "scripts/ci/add-secret-service-item-assert.py")
            - python3-secretstorage
            # needed for: tweaking snap package ("unsquashfs" binary)
            - squashfs-tools
      before_script:
        - | # init dbus
          NO_AT_BRIDGE=1;
          eval $(dbus-launch --sh-syntax);
        # TODO get back keyring initialization then enable respective e2e test case (see "src/e2e/index.spec.ts")
        #- | # init keychain
        #  eval $(echo -n "" | /usr/bin/gnome-keyring-daemon --login);
        #  eval $(/usr/bin/gnome-keyring-daemon --components=secrets --start);
        #  python3 ./scripts/ci/add-secret-service-item-assert.py;
      script: ./scripts/ci/travis/build-linux.sh
before_install:
  - | # installing the most recent yarn version
    curl -o- -L https://yarnpkg.com/install.sh | bash;
    export PATH="$HOME/.yarn/bin:$PATH";
install:
  - node --version
  - npm --version
  - yarn --version
  - npx envinfo
  - yarn install --pure-lockfile
after_failure:
  - tar -cvf e2e-logs.tar ./output/e2e
  - yarn scripts/transfer upload e2e-logs.tar
notifications:
  email:
    on_success: never
    on_failure: change
